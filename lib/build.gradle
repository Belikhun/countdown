/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://libraries.minecraft.net/' }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'me.lucko:commodore:2.2'
    implementation 'me.lucko:commodore-file:1.0'

    compileOnly 'org.spigotmc:spigot-api:1.20-R0.1-SNAPSHOT'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

jar {
    archiveFileName = 'countdown-lib.jar'
}

shadowJar {
    archiveClassifier = null
    archiveFileName = 'countdown.jar'

    dependencies {
        include(dependency('me.lucko:commodore'))
        include(dependency('me.lucko:commodore-file'))
        include(dependency('com.mojang:brigadier'))
    }

    relocate 'me.lucko.commodore', 'com.github.belikhun.Countdown.lib.commodore'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava.options.encoding = 'UTF-8'
compileJava.dependsOn clean
build.dependsOn shadowJar

artifacts {
    archives shadowJar
}